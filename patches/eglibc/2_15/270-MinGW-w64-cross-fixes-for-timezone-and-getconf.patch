diff -urN a/posix/cross-getconf.c b/posix/cross-getconf.c
--- a/posix/cross-getconf.c	2014-02-25 00:34:28.936889000 +0000
+++ b/posix/cross-getconf.c	2014-02-25 00:34:34.591607100 +0000
@@ -119,7 +119,9 @@
 
   getconf_dir = getenv ("GETCONF_DIR");
   if (getconf_dir == NULL
-      || strcmp (getconf_dir, "/dev/null") != 0)
+      || (strcmp (getconf_dir, "/dev/null") != 0 &&
+          strcmp (getconf_dir, "nul") != 0
+          ))
     {
       fprintf (stderr, "%s: GETCONF_DIR should be /dev/null\n", argv[0]);
       return 1;
diff -urN a/timezone/Makefile b/timezone/Makefile
--- a/timezone/Makefile	2014-02-25 00:34:31.877262400 +0000
+++ b/timezone/Makefile	2014-02-25 00:34:37.446969700 +0000
@@ -180,12 +180,27 @@
 
 $(objpfx)zic: $(addprefix $(objpfx), $(zic-objs))
 
-$(addprefix $(objpfx)cross-,$(zic-objs)): $(objpfx)cross-%.o: %.c
-	gcc $< -c $(OUTPUT_OPTION) $(CFLAGS-$*.c) $(CPPFLAGS-$*) \
-		-DCROSS_ZIC $(compile-mkdep-flags)
+#$(addprefix $(objpfx)cross-,$(zic-objs)): $(objpfx)cross-%.o: %.c
+#	gcc $< -c $(OUTPUT_OPTION) $(CFLAGS-$*.c) $(CPPFLAGS-$*) \
+#		-DCROSS_ZIC $(compile-mkdep-flags)
+#
+#$(objpfx)cross-zic: $(addprefix $(objpfx)cross-,$(zic-objs))
+#	gcc $(addprefix $(objpfx)cross-,$(zic-objs)) -o $@
 
-$(objpfx)cross-zic: $(addprefix $(objpfx)cross-,$(zic-objs))
-	gcc $(addprefix $(objpfx)cross-,$(zic-objs)) -o $@
+cross-zic-objs := $(addprefix $(objpfx)cross-,$(zic-objs))
+
+ALL_BUILD_CFLAGS = $(BUILD_CFLAGS) $(BUILD_CPPFLAGS) -D_GNU_SOURCE \
+		   -DIS_IN_build
+
+# When generic makefile support for build system programs is
+# available, it should replace this code.  See
+# <http://sourceware.org/bugzilla/show_bug.cgi?id=14087>.
+$(cross-zic-objs): $(objpfx)cross-%.o: %.c $(before-compile)
+	$(BUILD_CC) $($(basename $(<F))-CFLAGS) $(ALL_BUILD_CFLAGS) \
+	-DCROSS_ZIC $< $(OUTPUT_OPTION) $(native-compile-mkdep-flags) -c
+
+$(objpfx)cross-zic: $(cross-zic-objs)
+	$(BUILD_CC) $^ $(BUILD_LDFLAGS) -o $@
 
 tz-cflags = -DTZDIR='"$(zonedir)"' \
 	    -DTZDEFAULT='"$(localtime-file)"' \
diff -urN a/timezone/private.h b/timezone/private.h
--- a/timezone/private.h	2014-02-25 00:34:31.878762600 +0000
+++ b/timezone/private.h	2014-02-25 00:34:37.448969900 +0000
@@ -94,7 +94,10 @@
 #endif /* HAVE_GETTEXT */
 
 #if HAVE_SYS_WAIT_H
+#ifdef _WIN32
+#else
 #include <sys/wait.h>	/* for WIFEXITED and WEXITSTATUS */
+#endif
 #endif /* HAVE_SYS_WAIT_H */
 
 #ifndef WIFEXITED
diff -urN a/timezone/zic.c b/timezone/zic.c
--- a/timezone/zic.c	2014-02-25 00:34:31.885763500 +0000
+++ b/timezone/zic.c	2014-02-25 00:34:37.455470800 +0000
@@ -32,6 +32,10 @@
 #define MKDIR_UMASK 0755
 #endif
 
+#ifdef _WIN32
+#define mkdir(_x,_f) mkdir(_x)
+#endif
+
 /*
 ** On some ancient hosts, predicates like `isspace(C)' are defined
 ** only if isascii(C) || C == EOF. Modern hosts obey the C Standard,
@@ -105,9 +109,58 @@
 	zic_t		z_untiltime;
 };
 
+#ifdef _WIN32
+int copy_file(const char * fromname, const char * toname) {
+	FILE *from, *to;
+	size_t nbytes;
+	char buffer[4096];
+
+	from = fopen(fromname, "rb");
+	if ( from == NULL )
+	  return -1;
+
+	to = fopen(toname, "wb");
+	if ( to == NULL )
+	  return -1;
+
+	while ( (nbytes = fread(buffer, 1, sizeof(buffer), from)) > 0 ) {
+	  if ( fwrite(buffer, 1, nbytes, to) != nbytes ) {
+	    return -1;
+	  }
+	}
+	fclose(from);
+	fclose(to);
+	return 0;
+}
+
+int	link(const char * fromname, const char * toname) {
+	return copy_file(fromname, toname);
+}
+
+int symlink(const char * symlink_contents, const char * toname) {
+	char linktarget[4096];
+	if ( symlink_contents[0] == '/' ) {
+	  /* Absolute, easy. */
+	  strcpy( linktarget, symlink_contents );
+	} else {
+	  /* Relative, fiddly - assumes that toname is absolute .. */
+	  strcpy( linktarget, toname );
+	  if ( strrchr( linktarget, '/') != NULL ) {
+	    *(strrchr( linktarget, '/')+1) = '\0';
+	  } else {
+	    linktarget[0] = '\0';
+	  }
+	  strcat( linktarget, symlink_contents );
+	}
+	return copy_file(linktarget, toname);
+}
+#endif
+
 extern int	getopt(int argc, char * const argv[],
 			const char * options);
+#ifndef _WIN32
 extern int	link(const char * fromname, const char * toname);
+#endif
 extern char *	optarg;
 extern int	optind;
 
